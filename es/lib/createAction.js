var _this=this;import mapValues from'lodash.mapvalues';import merge from'lodash.merge';import sendRequest from'./sendRequest';var reserved=['onResponse','onError'];var result=function result(fn){for(var _len=arguments.length,arg=Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){arg[_key-1]=arguments[_key];}return typeof fn==='function'?fn.apply(undefined,arg):fn;};var isReserved=function isReserved(k){return reserved.indexOf(k)!==-1;};var noop=function noop(){};export var mergeOptions=function mergeOptions(defaults,opt,state){return mapValues(merge({},defaults,opt),function(v,k,_ref){var params=_ref.params;if(isReserved(k))return v;return result(v,params,state);});};var createAction=function createAction(){var defaults=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};return function(){var opt=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};return function(dispatch,getState){var options=mergeOptions(defaults,opt,getState());if(!options.method)throw new Error('Missing method');if(!options.endpoint)throw new Error('Missing endpoint');var reqPromise=sendRequest({options:options,dispatch:dispatch});reqPromise.catch(noop);if(options.onResponse)reqPromise.then(options.onResponse,noop);if(options.onError)reqPromise.catch(function(err){return options.onError(err,err.response);});var actionPromise=noop;actionPromise.then=function(resolve,reject){return reqPromise.then(resolve,reject);};actionPromise.catch=function(cb){return _this.then(undefined,cb);};return actionPromise;};};};export default createAction;