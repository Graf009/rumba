import{handleActions}from'redux-actions';import{Map,Set,fromJS}from'immutable';import compose from'reduce-reducers';var initialState=Map({subsets:Map(),entities:Map()});var ensureArray=function ensureArray(data){return Array.isArray(data)?data:[data];};var addEntities=function addEntities(state,_ref){var normalized=_ref.payload.normalized;if(!normalized)return state;return state.mergeDeep(fromJS({entities:normalized.entities}));};var createSubset=function createSubset(state,_ref2){var _ref2$payload=_ref2.payload,subset=_ref2$payload.subset,fresh=_ref2$payload.fresh;if(!subset)return state;var path=['subsets',subset];if(!fresh&&state.hasIn(path))return state;var record=Map({id:subset,pending:true});return state.setIn(path,record);};var setSubsetData=function setSubsetData(state,_ref3){var subset=_ref3.meta.subset,_ref3$payload=_ref3.payload,raw=_ref3$payload.raw,normalized=_ref3$payload.normalized;if(!subset)return state;var path=['subsets',subset];if(!state.hasIn(path))return state;return state.updateIn(path,function(subsetState){return subsetState.set('data',fromJS(raw)).set('entities',normalized?Set(ensureArray(normalized.result)):Set()).set('pending',false).set('error',null);});};var setSubsetError=function setSubsetError(state,_ref4){var subset=_ref4.meta.subset,payload=_ref4.payload;if(!subset)return state;var path=['subsets',subset];if(!state.hasIn(path))return state;return state.updateIn(path,function(subsetState){return subsetState.delete('data').delete('entities').set('error',payload).set('pending',false);});};export var api=handleActions({'rumba.request':createSubset,'rumba.failure':setSubsetError,'rumba.success':compose(setSubsetData,addEntities)},initialState);